# -*- coding: utf-8 -*-
import logging
from datetime import datetime

import requests
import telebot
from pycbrf import ExchangeRates
from MapsAPI import MapAPI
import os
from flask import Flask, request

server = Flask(__name__)

PORT = int(os.environ.get('PORT', 5000))
TOKEN = "1719349692:AAHNGDF0WeCkGXy3Ef8uWuYXtWmzQF4VypE"
HEROKU_APP_NAME = "mapsapibot"
url = 'http://api.openweathermap.org/data/2.5/weather'
api_weather = 'e4a3da131fe7dd1aa4d06d1ded5c6963'
bot = telebot.TeleBot(TOKEN)
map_api = MapAPI()

main_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1 = telebot.types.KeyboardButton("/weather‚õÖ")
btn2 = telebot.types.KeyboardButton("/currencyüí∏")
btn3 = telebot.types.KeyboardButton("/help‚ùì")
main_markup.row(btn1, btn2, btn3)

weather_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
weather_back = telebot.types.KeyboardButton('Back‚¨Ö')
weather_markup.add(weather_back)

currency_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = telebot.types.KeyboardButton('GBPüí∑')
item2 = telebot.types.KeyboardButton('EURüí∂')
item3 = telebot.types.KeyboardButton('CNYüí¥')
item4 = telebot.types.KeyboardButton('USDüíµ')
currency_back = telebot.types.KeyboardButton('Back‚¨Ö')
currency_markup.row(item1, item2, item3, item4)
currency_markup.add(currency_back)


@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, '–Ø –±–æ—Ç, —É–º–µ—é—â–∏–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ä—Ç–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.'
                                      '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É "help"',
                     reply_markup=main_markup)


@bot.message_handler(commands=["help", "help‚ùì"])
def help(message):
    bot.send_message(message.chat.id, '''–≠—Ç–æ—Ç –±–æ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ —Å –∫–∞—Ä—Ç–∞–º–∏.
–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è "=" –∏ –ø–µ—Ä–µ—á–∏—Å–ª—è—è –∏—Ö —Å –ø–æ–º–æ—â—å—é ";".
–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
geocode/–≥–µ–æ–∫–æ–¥: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
kind/toponym/—Ç–æ–ø–æ–Ω–∏–º: —Ç–∏–ø —Ç–æ–ø–æ–Ω–∏–º–∞ (–¥–æ–º, —É–ª–∏—Ü–∞, –º–µ—Ç—Ä–æ, —Ä–∞–π–æ–Ω, –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç)
text/place/–º–µ—Å—Ç–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
l/layer/—Å–ª–æ–π: –ø–µ—Ä–µ—á–µ–Ω—å —Å–ª–æ–µ–≤, (—Å–ø—É—Ç–Ω–∏–∫, —Å—Ö–µ–º–∞, –≥–∏–±—Ä–∏–¥, —Ç—Ä–∞—Ñ—Ñ–∏–∫)
z/zoom/–º–∞—Å—à—Ç–∞–±: –º–∞—Å—à—Ç–∞–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Ç 0 –¥–æ 17)
scale/—É–≤–µ–ª–∏—á–µ–Ω–∏–µ: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ (–æ—Ç 1.0 –¥–æ 4.0)
results/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 1
–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/weather: –≤—ã–≤–æ–¥ –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É
/currency: –∫—É—Ä—Å –≤–∞–ª—é—Ç (GBP, EUR, CNY, USD)
"back": –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.''')


@bot.message_handler(commands=["weather", "weather‚õÖ"])
def weather(message):
    if message is None:
        return
    bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', reply_markup=weather_markup)
    bot.register_next_step_handler(message, get_weather)


def get_weather(message):
    city_name = message.text.strip().lower()
    if city_name.startswith('/'):
        bot.send_message(message.chat.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
                         reply_markup=main_markup)
        return
    if city_name in ['stop', 'back', 'back‚¨Ö']:
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥", reply_markup=main_markup)
        return
    try:
        params = {'APPID': api_weather, 'q': city_name, 'units': 'metric', 'lang': 'ru'}
        result = requests.get(url, params=params)
        weather = result.json()
        deg = weather['wind']['deg']
        wind_direction = [("–°", abs(0 - deg)), ("–í", abs(90 - deg)), ("–Æ", abs(180 - deg)), ("–ó", abs(270 - deg))]
        wind_direction.sort(key=lambda s: s[1])
        bot.send_message(message.chat.id,
                         f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {str(weather['name'])}:\n"
                         f"—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {str(int(weather['main']['temp']))}¬∞\n"
                         f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {str(int(weather['main']['feels_like']))}¬∞\n"
                         f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {str(float(weather['wind']['speed']))} –º/—Å, {wind_direction[0][0]}\n"
                         f"–î–∞–≤–ª–µ–Ω–∏–µ: {str(float(weather['main']['pressure']))} –º–º —Ä—Ç. —Å—Ç.\n"
                         f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {str(int(weather['main']['humidity']))}%\n"
                         f"–í–∏–¥–∏–º–æ—Å—Ç—å: {str(weather['visibility'])}\n"
                         f"–û–ø–∏—Å–∞–Ω–∏–µ: {str(weather['weather'][0]['description'])}\n", reply_markup=main_markup)
    except Exception:
        bot.send_message(message.chat.id, "–ì–æ—Ä–æ–¥ " + city_name + " –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=main_markup)


@bot.message_handler(commands=["currency", "currencyüí∏"])
def currency(message):
    bot.send_message(chat_id=message.chat.id, text="<b>–ö–∞–∫–æ–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>",
                     reply_markup=currency_markup, parse_mode="html")
    bot.register_next_step_handler(message, exchange_rate)


def exchange_rate(message):
    text = message.text.strip().lower()
    if text.startswith('/'):
        bot.send_message(message.chat.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
                         reply_markup=main_markup)
        return
    if text in ['stop', 'back', 'back‚¨Ö']:
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥", reply_markup=main_markup)
        return
    if text in ['usdüíµ', 'eurüí∂', 'cnyüí¥', 'gbpüí∑']:
        text = text[:-1]
    if text in ['usd', 'eur', 'cny', 'gbp']:
        rates = ExchangeRates(datetime.now())
        bot.send_message(chat_id=message.chat.id,
                         text=f"<b>–°–µ–π—á–∞—Å –∫—É—Ä—Å: {text.upper()} = {float(rates[text.upper()].rate)}</b>",
                         parse_mode="html", reply_markup=main_markup)
    else:
        bot.send_message(message.chat.id, f'–ù–µ –Ω–∞–¥–π–µ–Ω –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã: {text.upper()}', reply_markup=main_markup)


@bot.message_handler(content_types=["text"])
def dialog(message):
    text = message.text.strip().lower()
    if text.startswith('/'):
        bot.send_message(message.chat.id, f'–ë–æ—Ç –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π "{text}"', reply_markup=main_markup)
        return
    if text in ['stop', 'back', 'back‚¨Ö']:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –∫–æ–º–º–∞–Ω–¥—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç", reply_markup=main_markup)
        return
    output = map_api.main(text)
    if isinstance(output, str):
        bot.send_message(message.chat.id, output)
    else:
        im = open("map.png", "rb")
        description = []
        for d in output:
            raw = []
            for key, value in d.items():
                if key != 'spn':
                    raw.append(f"{key}: {value}")
            description.append('\n'.join(raw))
        description.insert(0, f'–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(description)}:')
        description = '\n\n'.join(description)
        if len(description) > 963:
            description = description[:963] + "...\n...–æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é"
        bot.send_photo(message.chat.id, im, caption=description)


@server.route('/' + TOKEN, methods=['POST'])
def getMessage():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200


@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{HEROKU_APP_NAME}.herokuapp.com/{TOKEN}")
    return "?", 200


if __name__ == '__main__':
    server.run(host="0.0.0.0", port=PORT)
